#!/bin/sh
# ----------------------------------------------------------------------------
# Jargyle Start Up Batch script
#
# Required ENV variables:
# -----------------------
#   JAVA_HOME - location of a JDK home dir
#
# Optional ENV variables:
# -----------------------
#   JARGYLE_HOME - location of Jargyle's installed home dir
#   JARGYLE_LIB - Jargyle's lib dir relative to Jargyle's installed home dir
#   JARGYLE_OPTS - parameters passed to the Java VM when running Jargyle
# ----------------------------------------------------------------------------

# OS specific support.  $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false;
case "`uname`" in
  CYGWIN*)
    cygwin=true
  ;;
  MINGW*)
    mingw=true
  ;;
  Darwin*)
    darwin=true
    #
    # Look for the Apple JDKs first to preserve the existing behavior, and then look
    # for the new JDKs provided by Oracle.
    #
    if [ -z "$JAVA_HOME" ] && [ -L /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK ] ; then
      #
      # Apple JDKs
      #
      export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home
    fi

    if [ -z "$JAVA_HOME" ] && [ -L /System/Library/Java/JavaVirtualMachines/CurrentJDK ] ; then
      #
      # Apple JDKs
      #
      export JAVA_HOME=/System/Library/Java/JavaVirtualMachines/CurrentJDK/Contents/Home
    fi

    if [ -z "$JAVA_HOME" ] && [ -L "/Library/Java/JavaVirtualMachines/CurrentJDK" ] ; then
      #
      # Oracle JDKs
      #
      export JAVA_HOME=/Library/Java/JavaVirtualMachines/CurrentJDK/Contents/Home
    fi

    if [ -z "$JAVA_HOME" ] && [ -x "/usr/libexec/java_home" ]; then
      #
      # Apple JDKs
      #
      export JAVA_HOME=`/usr/libexec/java_home`
    fi
  ;;
esac

if [ -z "$JAVA_HOME" ] ; then
  if [ -r /etc/gentoo-release ] ; then
    JAVA_HOME=`java-config --jre-home`
  fi
fi

if [ -z "$JARGYLE_HOME" ] ; then
  ## resolve links - $0 may be a link to Jargyle's home
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  JARGYLE_HOME=`dirname "$PRG"`/..

  # make it fully qualified
  JARGYLE_HOME=`cd "$JARGYLE_HOME" && pwd`

  cd "$saveddir"
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
  [ -n "$JARGYLE_HOME" ] &&
    JARGYLE_HOME=`cygpath --unix "$JARGYLE_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
  [ -n "$JARGYLE_HOME" ] &&
    JARGYLE_HOME="`(cd "$JARGYLE_HOME"; pwd)`"
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
  # TODO classpath?
fi

if [ -z "$JAVA_HOME" ]; then
  javaExecutable="`which javac`"
  if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
    # readlink(1) is not available as standard on Solaris 10.
    readLink=`which readlink`
    if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
      if $darwin ; then
        javaHome="`dirname \"$javaExecutable\"`"
        javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
      else
        javaExecutable="`readlink -f \"$javaExecutable\"`"
      fi
      javaHome="`dirname \"$javaExecutable\"`"
      javaHome=`expr "$javaHome" : '\(.*\)/bin'`
      JAVA_HOME="$javaHome"
      export JAVA_HOME
    fi
  fi
fi

if [ -z "$JAVACMD" ] ; then
  if [ -n "$JAVA_HOME"  ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
      # IBM's JDK on AIX uses strange locations for the executables
      JAVACMD="$JAVA_HOME/jre/sh/java"
    else
      JAVACMD="$JAVA_HOME/bin/java"
    fi
  else
    JAVACMD="`which java`"
  fi
fi

if [ ! -x "$JAVACMD" ] ; then
  echo "Error: JAVA_HOME is not defined correctly." >&2
  echo "  We cannot execute $JAVACMD" >&2
  exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
  echo "Warning: JAVA_HOME environment variable is not set."
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
  [ -n "$JARGYLE_HOME" ] &&
    JARGYLE_HOME=`cygpath --path --windows "$JARGYLE_HOME"`
  [ -n "$JAVA_HOME" ] &&
    JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
  [ -n "$CLASSPATH" ] &&
    CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
fi

if [ -z "$JARGYLE_LIB" ] ; then
  JARGYLE_LIB=lib
fi

for i in "${JARGYLE_HOME}"/"${JARGYLE_LIB}"/*.jar; do
  JARGYLE_CLASSPATH="${JARGYLE_CLASSPATH}${i}:"
done

JARGYLE_MAIN_CLASS=jargyle.server.SocksServer

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
JARGYLE_CMD_LINE_ARGS="$@"
export JARGYLE_CMD_LINE_ARGS

exec "$JAVACMD" \
  $JARGYLE_OPTS \
  "-Dprogram.name=jargyle" \  
  -classpath "${JARGYLE_CLASSPATH}" \
  ${JARGYLE_MAIN_CLASS} "$@"
